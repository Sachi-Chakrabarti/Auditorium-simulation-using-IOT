#define BLYNK_TEMPLATE_ID " "
#define BLYNK_TEMPLATE_NAME " "
#define BLYNK_AUTH_TOKEN " "

#include <AccelStepper.h>
#include <ESP8266WiFi.h>
#include <BlynkSimpleEsp8266.h>

#define BLYNK_PRINT Serial

char ssid[] = " write wifi name";
char pass[] = "wifi password";
// Motor pin definitions:
// Include the AccelStepper library:

// Motor pin definitions:
#define motorPin1 D5  // IN1 on the ULN2003 driver
#define motorPin2 D6  // IN2 on the ULN2003 driver
#define motorPin3 D7  // IN3 on the ULN2003 driver
#define motorPin4 D8  // IN4 on the ULN2003 driver

// Define the AccelStepper interface type: 4 wire motor in half step mode:
#define MotorInterfaceType 8

// Initialize with pin sequence IN1-IN3-IN2-IN4
AccelStepper stepper = AccelStepper(MotorInterfaceType, motorPin1, motorPin3, motorPin2, motorPin4);

const int in = D0;
const int out = D1;
int count = 0;
int left=0;
int timestart = 0;
bool buzzerStatus = false;

#define BUZZER_PIN D2
#define LM35_PIN A0  // Define the analog pin for the LM35 temperature sensor

float temperature;  // Variable to store temperature value

void setup() {
  Serial.begin(9600);
  Blynk.begin(BLYNK_AUTH_TOKEN, ssid, pass);
  pinMode(in, INPUT);
  pinMode(out, INPUT);
  stepper.setMaxSpeed(1000);
}

void loop() {

  Blynk.run();

  int in_value = digitalRead(in);    // Setting Variables & Reading Values from In Sensor
  int out_value = digitalRead(out);  // Setting Variables & Reading Values from Out Sensor

  if (in_value == LOW) {
    count++;
    Serial.println("INC:" + String(count));  // Send increment signal
    Blynk.virtualWrite(V0, count);
    if(count==0)Blynk.virtualWrite(V3, 1);
    else if(count!=0)Blynk.virtualWrite(V3, 0);
    delay(1000);
  }

  if (out_value == LOW) {
    count--;
    left++;
    Serial.println("DEC:" + String(count));  // Send decrement signal
    Blynk.virtualWrite(V1, left); 
    if(count==0)Blynk.virtualWrite(V3, 1);
    else if(count!=0)Blynk.virtualWrite(V3, 0);
    delay(1000);
  }

/*
  // Read analog input from LM35 temperature sensor
  int sensorValue = analogRead(LM35_PIN);

  // Convert analog value to temperature in Celsius
  temperature = (sensorValue * 0.48875) * 100;  // Each 10mV corresponds to 1째C, hence 0.48875 is used for conversion

 // Serial.print("Temperature: ");
  //Serial.print(temperature);
  //Serial.println(" 째C");

  // Check if temperature exceeds threshold
  if (temperature > 0) {  // Adjust the threshold temperature as per your requirement
    activateBuzzer();        // Activate buzzer if temperature exceeds threshold
    buzzerStatus = true;     // Update buzzer status
  } else {
    digitalWrite(BUZZER_PIN, LOW);  // Turn off buzzer if temperature is below threshold
    buzzerStatus = false;           // Update buzzer status
  }
}*/
/*
void activateBuzzer() {
  digitalWrite(BUZZER_PIN, HIGH);  // Turn on the buzzer
  delay(1000);                     // Buzzer on time
  digitalWrite(BUZZER_PIN, LOW);   // Turn off the buzzer
}*/
stepper.runSpeed();
}

  BLYNK_WRITE(V2) {
  int buttonClockwiseState = param.asInt();
  
  if (buttonClockwiseState == HIGH) {
    stepper.setSpeed(500);  // Set speed for clockwise rotation
    stepper.enableOutputs();  // Enable motor outputs
    Serial.println("Motor Running");
  } else {
   
      stepper.setSpeed(0);  // Set speed to 0 to stop the motor
      stepper.disableOutputs();  // Disable motor outputs
      Serial.println("Motor Stopped");
    
  }
}


/*
  // Read analog input from LM35 temperature sensor
  int sensorValue = analogRead(LM35_PIN);

  // Convert analog value to temperature in Celsius
  temperature = (sensorValue * 0.48875) * 100;  // Each 10mV corresponds to 1째C, hence 0.48875 is used for conversion

 // Serial.print("Temperature: ");
  //Serial.print(temperature);
  //Serial.println(" 째C");

  // Check if temperature exceeds threshold
  if (temperature > 0) {  // Adjust the threshold temperature as per your requirement
    activateBuzzer();        // Activate buzzer if temperature exceeds threshold
    buzzerStatus = true;     // Update buzzer status
  } else {
    digitalWrite(BUZZER_PIN, LOW);  // Turn off buzzer if temperature is below threshold
    buzzerStatus = false;           // Update buzzer status
  }
}*/
/*
void activateBuzzer() {
  digitalWrite(BUZZER_PIN, HIGH);  // Turn on the buzzer
  delay(1000);                     // Buzzer on time
  digitalWrite(BUZZER_PIN, LOW);   // Turn off the buzzer
}*/

